<project xmlns="http://maven.apache.org/POM/4.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- This module is used to package the console scripts as a separate artifact. This artifact
     will be used while building the docker image -->

    <parent>
        <groupId>io.confluent</groupId>
        <artifactId>kafka-rest-parent</artifactId>
        <version>5.0.0-SNAPSHOT</version>
    </parent>

    <groupId>io.confluent</groupId>
    <artifactId>kafka-rest-scala-consumer</artifactId>
    <packaging>jar</packaging>
    <name>${project.artifactId}</name>
    <description>
        The Kafka REST Proxy provides a RESTful interface to a Kafka cluster, making it easy to
        produce and consume messages, view the state of the cluster, and perform administrative
        actions without using the native Kafka protocol or clients.
    </description>

    <dependencies>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-rest-common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_${kafka.scala.version}</artifactId>
            <version>1.1.0</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>4.1.1</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-json-serializer</artifactId>
            <version>4.1.1</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-rest-common</artifactId>
            <scope>test</scope>
            <classifier>tests</classifier>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
            This is a workaround for IntelliJ which seems to have a problem including junit + hamcrest
            as transitive dependencies of rest-utils-test. mvn properly resolves these, so it may have
            something to do with special junit handling and test scopes since rest-utils-test is not in
            <scope>test</scope>.
        -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- End workaround -->
    </dependencies>

    <!--<build>-->
        <!--<pluginManagement>-->
            <!--<plugins>-->
                <!--<plugin>-->
                    <!--<groupId>org.apache.maven.plugins</groupId>-->
                    <!--<artifactId>maven-assembly-plugin</artifactId>-->
                    <!--<version>${maven-assembly.version}</version>-->
                <!--</plugin>-->
            <!--</plugins>-->
        <!--</pluginManagement>-->

        <!--<plugins>-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-assembly-plugin</artifactId>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>package-console-scripts</id>-->
                        <!--<goals>-->
                            <!--<goal>single</goal>-->
                        <!--</goals>-->
                        <!--<phase>package</phase>-->
                        <!--<configuration>-->
                            <!--<descriptors>-->
                                <!--<descriptor>src/assembly/resources.xml</descriptor>-->
                            <!--</descriptors>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
        <!--</plugins>-->
    <!--</build>-->
</project>
